From 5613bbb3e75deffcea947ba2ac2b15fb5dd93906 Mon Sep 17 00:00:00 2001
From: Indhi Rousseau <contact@thekinrar.fr>
Date: Mon, 9 Nov 2020 01:42:42 +0100
Subject: [PATCH] FML2 protocol support


diff --git a/api/src/main/java/net/md_5/bungee/api/ServerPing.java b/api/src/main/java/net/md_5/bungee/api/ServerPing.java
index fc92a7b5..3f5760c2 100644
--- a/api/src/main/java/net/md_5/bungee/api/ServerPing.java
+++ b/api/src/main/java/net/md_5/bungee/api/ServerPing.java
@@ -82,25 +82,54 @@ public class ServerPing
     private Favicon favicon;
 
     @Data
-    public static class ModInfo
+    public static class LegacyModInfo
     {
 
         private String type = "FML";
-        private List<ModItem> modList = new ArrayList<>();
+        private List<LegacyModItem> modList = new ArrayList<>();
     }
 
     @Data
     @AllArgsConstructor
-    public static class ModItem
+    public static class LegacyModItem
     {
 
         private String modid;
         private String version;
     }
 
-    // Right now, we don't get the mods from the user, so we just use a stock ModInfo object to
-    // create the server ping. Vanilla clients will ignore this.
-    private final ModInfo modinfo = new ModInfo();
+    private final LegacyModInfo modinfo = new LegacyModInfo();
+
+    @Data
+    public static class ForgeData
+    {
+        private int fmlNetworkVersion = 2;
+        private List<ModItem> mods = new ArrayList<>();
+        private List<ChannelItem> channels = new ArrayList<>();
+    }
+
+    @Data
+    @AllArgsConstructor
+    public static class ModItem
+    {
+        private String modId;
+        private String modmarker;
+    }
+
+    @Data
+    @AllArgsConstructor
+    public static class ChannelItem
+    {
+        private String res;
+        private String version;
+        private boolean required;
+    }
+
+    private ForgeData forgeData;
+
+    public ServerPing(Protocol version, Players players, BaseComponent description, Favicon favicon) {
+        this(version, players, description, favicon, null);
+    }
 
     @Deprecated
     public ServerPing(Protocol version, Players players, String description, String favicon)
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 19f0788b..9800e1fd 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -14,6 +14,7 @@ import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.Connection;
 import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.event.ServerConnectedEvent;
 import net.md_5.bungee.api.event.ServerKickEvent;
@@ -44,6 +45,7 @@ import net.md_5.bungee.protocol.packet.GameState;
 import net.md_5.bungee.protocol.packet.Handshake;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.Login;
+import net.md_5.bungee.protocol.packet.LoginPayloadRequest;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PluginMessage;
@@ -67,6 +69,15 @@ public class ServerConnector extends PacketHandler
     @Getter
     private ForgeServerHandler handshakeHandler;
     private boolean obsolete;
+    private final Connection.Unsafe unsafe = new Connection.Unsafe()
+    {
+        @Override
+        public void sendPacket(DefinedPacket packet)
+        {
+            ch.write( packet );
+        }
+    };
+    public Connection.Unsafe unsafe() { return unsafe; }
 
     private enum State
     {
@@ -128,6 +139,10 @@ public class ServerConnector extends PacketHandler
 
                 // All done.
                 properties = newp;
+            } else if(user.getPendingConnection().isForge()) {
+                LoginResult.Property[] newp = Arrays.copyOf(properties, properties.length + 1);
+                newp[newp.length - 1] = new LoginResult.Property("forge", "true", null);
+                properties = newp;
             }
 
             // If we touched any properties, then append them
@@ -170,6 +185,11 @@ public class ServerConnector extends PacketHandler
         ch.setProtocol( Protocol.GAME );
         thisState = State.LOGIN;
 
+        user.unsafe().sendPacket(new LoginSuccess(user.getPendingConnection().getUniqueId(), user.getPendingConnection().getName()));
+        user.getCh().setProtocol( Protocol.GAME );
+        user.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( user.getPendingConnection().getVersion() ) );
+
+        // TODO
         // Only reset the Forge client when:
         // 1) The user is switching servers (so has a current server)
         // 2) The handshake is complete
@@ -465,6 +485,11 @@ public class ServerConnector extends PacketHandler
         user.unsafe().sendPacket( pluginMessage );
     }
 
+    @Override
+    public void handle(LoginPayloadRequest request) throws Exception {
+        user.unsafe().sendPacket( request );
+    }
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 82b499aa..26fa37a8 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -82,6 +82,8 @@ public final class UserConnection implements ProxiedPlayer
     private final String name;
     @Getter
     private final InitialHandler pendingConnection;
+    @Getter
+    private ServerConnector serverConnector;
     /*========================================================================*/
     @Getter
     @Setter
@@ -372,7 +374,8 @@ public final class UserConnection implements ProxiedPlayer
                 PipelineUtils.BASE.initChannel( ch );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
-                ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
+                serverConnector = new ServerConnector( bungee, UserConnection.this, target );
+                ch.pipeline().get( HandlerBoss.class ).setHandler( serverConnector );
             }
         };
         ChannelFutureListener listener = new ChannelFutureListener()
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index d345588d..4e9105a1 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -121,6 +121,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Getter
     private WaterHybridProfile hybridProfile;
     private UUID onlineId = null;
+    @Getter
+    private boolean forge;
 
     @Override
     public boolean shouldHandle(PacketWrapper packet) throws Exception
@@ -131,7 +133,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private enum State
     {
 
-        HANDSHAKE, STATUS, PING, USERNAME, ENCRYPT, FINISHED;
+        HANDSHAKE, STATUS, PING, USERNAME, ENCRYPT, NEGOTIATING, FINISHED;
     }
 
     private boolean canSendKickMessage()
@@ -330,6 +332,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             String[] split = handshake.getHost().split( "\0", 2 );
             handshake.setHost( split[0] );
             extraDataInHandshake = "\0" + split[1];
+
+            if(hybridMode) {
+                forge = extraDataInHandshake.equals("\0FML2\0");
+            }
         }
 
         // SRV records can end with a . depending on DNS / client.
@@ -617,8 +623,8 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                                 userCon.setLateAuth(true);
                             }
 
-                            unsafe.sendPacket( new LoginSuccess( getUniqueId(), getName() ) );
-                            ch.setProtocol( Protocol.GAME );
+//                            unsafe.sendPacket( new LoginSuccess( getUniqueId(), getName() ) );
+//                            ch.setProtocol( Protocol.GAME );
 
                             ch.getHandle().pipeline().get( HandlerBoss.class ).setHandler( new UpstreamBridge( bungee, userCon ) );
                             bungee.getPluginManager().callEvent( new PostLoginEvent( userCon ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index f1ec105c..09c573c8 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -29,6 +29,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.KeepAlive;
+import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
@@ -49,7 +50,7 @@ public class UpstreamBridge extends PacketHandler
 
         BungeeCord.getInstance().addConnection( con );
         con.getTabListHandler().onConnect();
-        con.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( con.getPendingConnection().getVersion() ) );
+//        con.unsafe().sendPacket( BungeeCord.getInstance().registerChannels( con.getPendingConnection().getVersion() ) );
     }
 
     @Override
@@ -110,7 +111,7 @@ public class UpstreamBridge extends PacketHandler
     @Override
     public boolean shouldHandle(PacketWrapper packet) throws Exception
     {
-        return con.getServer() != null || packet.packet instanceof PluginMessage;
+        return con.getServer() != null || packet.packet instanceof PluginMessage || packet.packet instanceof LoginPayloadResponse;
     }
 
     @Override
@@ -280,6 +281,11 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    @Override
+    public void handle(LoginPayloadResponse response) throws Exception {
+        con.getServerConnector().unsafe().sendPacket(response);
+    }
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 989bfd87..9ede17cf 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -9,7 +9,10 @@ import io.netty.handler.codec.haproxy.HAProxyMessage;
 import io.netty.handler.timeout.ReadTimeoutException;
 import java.io.IOException;
 import java.net.InetSocketAddress;
+import java.util.Objects;
 import java.util.logging.Level;
+
+import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.connection.CancelSendSignal;
 import net.md_5.bungee.connection.InitialHandler;
-- 
2.28.0

